@startuml "Cloud Services Business Monitoring - High Level Design"

skinparam backgroundColor #E6F3FF

skinparam rectangle {
  BackgroundColor #F8F9FA
  BorderColor #2C3E50
  FontColor #2C3E50
  BorderThickness 2
  Shadowing true
  RoundCorner 20
}

skinparam database {
  BackgroundColor #DEEAFC
  BorderColor #2C3E50
  FontColor #2C3E50
  Shadowing true
}

skinparam queue {
  BackgroundColor #FCE8DE
  BorderColor #2C3E50
  FontColor #2C3E50
  Shadowing true
}

skinparam arrow {
  Color #2C3E50
  FontColor #2C3E50
  Thickness 1.5
}

skinparam component {
  BackgroundColor #E8F5E9
  BorderColor #2C3E50
  FontColor #2C3E50
  Shadowing true
}

skinparam note {
  BackgroundColor #FFF9C4
  BorderColor #FFD54F
  FontColor #5D4037
  Shadowing true
}

skinparam footer {
  FontSize 16
  FontStyle bold
}

rectangle "üçÉ Cloud Services Business Monitoring" as CSBM {
  component "Spring Boot Application" as SpringApp {
    component "REST API" as RestAPI
    component "Service Layer" as ServiceLayer
    component "Report Generator" as ReportGenerator
    component "Persistence Layer" as PersistenceLayer
    component "Kafka Producer/Consumer" as KafkaClient
    component "Security Layer" as SecurityLayer
    component "File Processing" as FileProcessing
    component "Notification System" as NotificationSystem
    
    ' Evento interno
    component "Event System" as EventSystem
  }
}

database "üêò PostgreSQL" as PostgreSQL {
  component "Cloud Services Data" as CloudServicesDB
  component "Job Executions" as JobExecutionsDB
  component "File Uploads" as FileUploadsDB
  component "Processing Errors" as ErrorsDB
}

queue "ü™∂ Apache Kafka" as Kafka {
  queue "notifications" as NotificationsTopic
  queue "alerts.customer_expired" as AlertsTopic
}

note bottom of Kafka
  Gestisce:
  - Notifiche interne
  - Eventi per sistemi esterni
end note

rectangle "üîê Keycloak" as Keycloak {
  component "Authentication Server" as AuthServer
  component "User Management" as UserManagement
  component "Role-Based Access Control" as RBAC
}

note bottom of Keycloak
  Fornisce:
  - Autenticazione OAuth2/OIDC
  - Gestione utenti e ruoli
  - Controllo accessi basato su ruoli
end note

rectangle "üåê External Systems" as ExternalSystems

' Volumi Docker
component "[Volume: app_uploads]" as AppUploads
component "[Volume: postgres_data]" as PostgresData
component "[Volume: kafka_data]" as KafkaData

' Relazioni interne all'applicazione
RestAPI --> ServiceLayer
ServiceLayer --> PersistenceLayer
ServiceLayer --> FileProcessing
ServiceLayer --> NotificationSystem
ServiceLayer --> ReportGenerator
SecurityLayer --> RestAPI : protegge
KafkaClient <--> NotificationSystem : supporta
NotificationSystem --> KafkaClient : invia notifiche

' Relazioni con PostgreSQL
PersistenceLayer --> PostgreSQL : persiste dati
FileProcessing --> FileUploadsDB : registra
FileProcessing --> JobExecutionsDB : aggiorna
ReportGenerator --> CloudServicesDB : interroga

' Relazioni con Event System
ServiceLayer --> EventSystem : pubblica JobCreatedEvent
FileProcessing --> EventSystem : pubblica FileProcessingCompletedEvent
EventSystem --> FileProcessing : notifica job creato
EventSystem --> NotificationSystem : notifica completamento

' Relazioni con Kafka
KafkaClient --> NotificationsTopic : pubblica/consuma
KafkaClient --> AlertsTopic : pubblica
AlertsTopic --> ExternalSystems : notifica

' Relazioni con Keycloak
SecurityLayer --> AuthServer : autentica
RestAPI --> RBAC : autorizza
UserManagement --> SecurityLayer : fornisce informazioni utente

' Relazioni con i volumi
FileProcessing ..> AppUploads : salva file
PostgreSQL ..> PostgresData : persiste dati
Kafka ..> KafkaData : persiste messaggi

note right of PostgreSQL
  Memorizza:
  - Servizi cloud
  - File caricati
  - Job di elaborazione
  - Errori di processing
end note

note right of EventSystem
  Sistema di eventi Spring:
  - JobCreatedEvent
  - FileProcessingCompletedEvent
  - Disaccoppia componenti
  - Supporta comunicazione asincrona
end note

footer "                                                                                                                                      üê≥ **Containerizzato con Docker**"

@enduml